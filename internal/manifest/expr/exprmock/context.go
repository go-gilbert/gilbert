// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-gilbert/gilbert/internal/manifest/expr (interfaces: CommandProcessor,ValueResolver)
//
// Generated by this command:
//
//	mockgen -package=exprmock -destination=exprmock/context.go github.com/go-gilbert/gilbert/internal/manifest/expr CommandProcessor,ValueResolver
//

// Package exprmock is a generated GoMock package.
package exprmock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommandProcessor is a mock of CommandProcessor interface.
type MockCommandProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockCommandProcessorMockRecorder
	isgomock struct{}
}

// MockCommandProcessorMockRecorder is the mock recorder for MockCommandProcessor.
type MockCommandProcessorMockRecorder struct {
	mock *MockCommandProcessor
}

// NewMockCommandProcessor creates a new mock instance.
func NewMockCommandProcessor(ctrl *gomock.Controller) *MockCommandProcessor {
	mock := &MockCommandProcessor{ctrl: ctrl}
	mock.recorder = &MockCommandProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandProcessor) EXPECT() *MockCommandProcessorMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockCommandProcessor) EvalCommand(command string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalCommand", command)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockCommandProcessorMockRecorder) Call(command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalCommand", reflect.TypeOf((*MockCommandProcessor)(nil).EvalCommand), command)
}

// MockValueResolver is a mock of ValueResolver interface.
type MockValueResolver struct {
	ctrl     *gomock.Controller
	recorder *MockValueResolverMockRecorder
	isgomock struct{}
}

// MockValueResolverMockRecorder is the mock recorder for MockValueResolver.
type MockValueResolverMockRecorder struct {
	mock *MockValueResolver
}

// NewMockValueResolver creates a new mock instance.
func NewMockValueResolver(ctrl *gomock.Controller) *MockValueResolver {
	mock := &MockValueResolver{ctrl: ctrl}
	mock.recorder = &MockValueResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValueResolver) EXPECT() *MockValueResolverMockRecorder {
	return m.recorder
}

// GetValue mocks base method.
func (m *MockValueResolver) GetValue(varName string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", varName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockValueResolverMockRecorder) GetValue(varName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockValueResolver)(nil).GetValue), varName)
}
